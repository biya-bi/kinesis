services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER_FILE: /run/secrets/database/user
      POSTGRES_PASSWORD_FILE: /run/secrets/database/password
      POSTGRES_DB_FILE: /run/secrets/database/name
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./databases/postgres/secrets:/run/secrets/database
      - ./databases/postgres/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s
  kafka:
    image: confluentinc/cp-kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
    ports:
      - 9092:9092
    volumes:
      - kafka-logs:/var/lib/kafka/logs
    healthcheck:
      test: ps aux | grep kafka || exit 1
      interval: 10s
      retries: 25
      start_period: 20s
    depends_on:
      zookeeper:
        condition: service_healthy
  schema-registry:
    image: confluentinc/cp-schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_DEBUG: true
    ports:
      - 8081:8081
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --fail --silent --insecure http://schema-registry:8081/subjects --output /dev/null || exit 1
    depends_on:
      kafka:
        condition: service_healthy
  connect:
    image: kafka-connect-standalone
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_OFFSET_STORAGE_FILE_FILENAME: /var/lib/kafka/offsets/connect.offsets
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      STANDALONE_NAME: kinesis-postgresql-source
      STANDALONE_CONNECTOR_CLASS: io.confluent.connect.jdbc.JdbcSourceConnector
      STANDALONE_TASKS_MAX: 1
      STANDALONE_CONNECTION_URL: jdbc:postgresql://postgres:5432/kinesis
      STANDALONE_CONNECTION_USER: kinesis
      STANDALONE_CONNECTION_PASSWORD: Passw0rd
      STANDALONE_DB_NAME: kinesis
      STANDALONE_TABLE_WHITELIST: drivers
      STANDALONE_MODE: timestamp
      STANDALONE_TIMESTAMP_COLUMN_NAME: created_on,updated_on
      STANDALONE_TOPIC_PREFIX: kinesis-
    depends_on:
      schema-registry:
        condition: service_healthy
    ports:
      - 8083:8083
    volumes:
      - connect-offsets:/var/lib/kafka/offsets
volumes:
  postgres-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-logs:
  connect-offsets: